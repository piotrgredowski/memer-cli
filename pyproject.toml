[project]
name = "memer"
version = "0.5.0"
description = "A CLI tool to generate memes!"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "pillow>=10.4.0",
    "platformdirs>=4.3.6",
    "pydantic>=2.9.2",
    "pytz>=2024.2",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "typer>=0.12.5",
]

[project.scripts]
memer = "memer.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/memer"]

[tool.uv]
dev-dependencies = [
    "pre-commit>=3.8.0",
    "ruff>=0.7.4",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.23.0",
]

[tool.ruff]
# General settings
fix = true
indent-width = 4
line-length = 100
output-format = "concise"
required-version = ">=0.6.5"
show-fixes = false
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"

[tool.ruff.lint]
select = [
    "F",   # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "E",   # https://docs.astral.sh/ruff/rules/#error-e
    "W",   # https://docs.astral.sh/ruff/rules/#warning-w
    "C90", # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "I",   # https://docs.astral.sh/ruff/rules/#isort-i
    "N",   # https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "UP",    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "YTT",   # https://docs.astral.sh/ruff/rules/#flake8-2020-ytt
    "ANN",   # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "ASYNC", # https://docs.astral.sh/ruff/rules/#flake8-annotations-ann
    "S",   # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "BLE", # https://docs.astral.sh/ruff/rules/#flake8-blind-except-ble
    "FBT", # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
    "B",   # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "A",   # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "COM", # https://docs.astral.sh/ruff/rules/#flake8-commas-com
    "C4", # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "DTZ", # https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "T10", # https://docs.astral.sh/ruff/rules/#flake8-debugger-t10
    "DJ",  # https://docs.astral.sh/ruff/rules/#flake8-django-dj
    "EXE", # https://docs.astral.sh/ruff/rules/#flake8-executable-exe
    "FA",  # https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
    "ISC", # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "ICN", # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
    "LOG", # https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "G",   # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
    "PIE", # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "T20", # https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "PYI", # https://docs.astral.sh/ruff/rules/#flake8-pyi-pyi
    "PT",  # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "RSE", # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RET", # https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "SLF", # https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SIM", # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "TID", # https://docs.astral.sh/ruff/rules/relative-imports/
    "TCH", # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "INT", # https://docs.astral.sh/ruff/rules/#flake8-gettext-int
    "ARG", # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "PTH", # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "PD",  # https://docs.astral.sh/ruff/rules/#pandas-vet-pd
    "PLC", # https://docs.astral.sh/ruff/rules/#convention-c
    "PLE", # https://docs.astral.sh/ruff/rules/#error-e_1
    "TRY", # https://docs.astral.sh/ruff/rules/#tryceratops-try
    "FLY", # https://docs.astral.sh/ruff/rules/#flynt-fly
    "PERF", # https://docs.astral.sh/ruff/rules/#perflint-perf
    "RUF", # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
]
extend-select = [
    "D",    # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "EM",   # https://docs.astral.sh/ruff/rules/#flake8-errmsg-em
    "INP",  # https://docs.astral.sh/ruff/rules/#flake8-no-pep420-inp
    "Q",    # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "SLOT", # https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "TD",   # https://docs.astral.sh/ruff/rules/#flake8-todos-td
    "FIX",  # https://docs.astral.sh/ruff/rules/#flake8-fixme-fix
    "ERA",  # https://docs.astral.sh/ruff/rules/#eradicate-era
    "PGH",  # https://docs.astral.sh/ruff/rules/#pandas-vet-pd
    "PLR",  # https://docs.astral.sh/ruff/rules/#refactor-r
    "PLW",  # https://docs.astral.sh/ruff/rules/#warning-w_1
    "NPY",  # https://docs.astral.sh/ruff/rules/#numpy-specific-rules-npy
    "AIR",  # https://docs.astral.sh/ruff/rules/#airflow-air
]
ignore = [
    "D100",   # https://docs.astral.sh/ruff/rules/undocumented-public-module/
    "D104",   # https://docs.astral.sh/ruff/rules/undocumented-public-package/
    "COM812", # https://docs.astral.sh/ruff/rules/missing-trailing-comma/
    "ANN101", # https://docs.astral.sh/ruff/rules/missing-type-self/
    "TD003",  # https://docs.astral.sh/ruff/rules/missing-todo-link/
    "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
    "FIX002", # https://docs.astral.sh/ruff/rules/line-contains-todo/
]
fixable = ["ALL"]
unfixable = ["ISC001"]

task-tags = ["TODO", "FIXME", "XXX", "NOTE"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ANN", "D", "INP", "S101", "SLF"]

[tool.ruff.lint.flake8-annotations]
# ignore-fully-untyped = true # Can be useful for projects that are not fully typed yet.

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase",
]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]

[tool.ruff.lint.isort]
detect-same-package = true
force-single-line = true    # NOTE: Simplifies git diff appearance.
known-first-party = ["src"]
# required-imports = ["from __future__ import annotations"] # For Python < 3.10

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.validator",
    "classmethod",
    "declared_attr",
    "expression",
    "comparator",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/memer",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
